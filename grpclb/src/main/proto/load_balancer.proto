syntax = "proto3";

import "google/protobuf/duration.proto";

// TODO(yetianx): Change package to grpc.lb.v1 when it is ready to ship.
package loadbalancer_gslb.client.grpc;

option java_multiple_files = true;
option java_package = "io.grpc.grpclb";
option java_outer_classname = "LoadBalancerProto";

service LoadBalancer {
  // Bidirectional rpc to get a list of servers.
  rpc BalanceLoad(stream LoadBalanceRequest)
      returns (stream LoadBalanceResponse);
}

message LoadBalanceRequest {
  oneof load_balance_request_type {
    // This message should be sent on the first request to the load balancer.
    InitialLoadBalanceRequest initial_request = 1;

    // The client stats should be periodically reported to the load balancer
    // based on the duration defined in the InitialLoadBalanceResponse.
    ClientStats client_stats = 2;
  }
}

message InitialLoadBalanceRequest {
  // Name of load balanced service (IE, service.grpc.gslb.google.com)
  string name = 1;
}

// Contains client level statistics that are useful to load balancing. Each
// count should be reset to zero after reporting the stats.
message ClientStats {
  // The total number of requests sent by the client since the last report.
  int64 total_requests = 1;

  // The number of client rpc errors since the last report.
  int64 client_rpc_errors = 2;

  // The number of dropped requests since the last report.
  int64 dropped_requests = 3;
}

message LoadBalanceResponse {
  oneof load_balance_response_type {
    // This message should be sent on the first response to the client.
    InitialLoadBalanceResponse initial_response = 1;

    // Contains the list of servers selected by the load balancer. The client
    // should send requests to these servers in the specified order.
    ServerList server_list = 2;
  }
}

message InitialLoadBalanceResponse {
  oneof initial_response_type {
    // Contains gRPC config options like RPC deadline or flow control.
    // TODO(yetianx): Change to ClientConfig after it is defined.
    string client_config = 1;

    // This is an application layer redirect that indicates the client should
    // use the specified server for load balancing. When this field is set in
    // the response, the client should open a separate connection to the
    // load_balancer_delegate and call the BalanceLoad method.
    string load_balancer_delegate = 2;
  }

  // This interval defines how often the client should send the client stats
  // to the load balancer. Stats should only be reported when the duration is
  // positive.
  google.protobuf.Duration client_stats_report_interval = 3;
}

message ServerList {
  // Contains a list of servers selected by the load balancer. The list will
  // be updated when server resolutions change or as needed to balance load
  // across more servers. The client should consume the server list in order
  // unless instructed otherwise via the client_config.
  repeated Server servers = 1;

  // Indicates the amount of time that the client should consider this server
  // list as valid. It may be considered stale after waiting this interval of
  // time after receiving the list. If the interval is not positive, the
  // client can assume the list is valid until the next list is received.
  google.protobuf.Duration expiration_interval = 3;
}

message Server {
  // A resolved address and port for the server. The IP address string may
  // either be an IPv4 or IPv6 address.
  string ip_address = 1;
  int32 port = 2;

  // An opaque token that is passed from the client to the server in metadata.
  // The server may expect this token to indicate that the request from the
  // client was load balanced.
  // TODO(yetianx): Not used right now, and will be used after implementing
  // load report.
  bytes load_balance_token = 3;

  // Indicates whether this particular request should be dropped by the client
  // when this server is chosen from the list.
  bool drop_request = 4;
}
